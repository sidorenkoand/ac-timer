import { app, BrowserWindow, ipcMain, Tray, Menu, shell } from 'electron';
import path from 'path';
import { setCredentials, getCredentials as getCredentialsFromStorage, clear } from './credentials-storage'
import bypassCors from "./bypass-cors";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow
let tray: Tray

const createWindow = async () => {
  const iconPath = path.join(__dirname, '../../assets/icons/timer.png')
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 478,
    height: 600,
    icon: iconPath,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  // and load the index.html of the app.
  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {
    await mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);
  } else {
    await mainWindow.loadFile(path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`));
  }

  // Updated for Electron 36 compatibility
  mainWindow.on('minimize', () => {
    mainWindow.hide();
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  initTray();

  bypassCors(mainWindow)
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    await createWindow();
  }
});


/**
 * Init tray icon
 *
 * @private
 */
const initTray = () => {
  const iconPath = path.join(__dirname, '../../assets/icons/timer.png')

  tray = new Tray(iconPath)

  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Show App',
      click: function () {
        mainWindow.show()
      }
    },
    {
      label: 'Quit',
      click: function () {
        // mainWindow.isQuiting = true
        mainWindow.close()
      }
    }
  ])

  tray.setContextMenu(contextMenu)
}

const setAppActive = (isActive: boolean) => {
  const icon = isActive ? '../../assets/icons/timer-active.png' : '../../assets/icons/timer.png'
  const icon_path = path.join(__dirname, icon)

  tray.setImage(icon_path)
  mainWindow.setIcon(icon_path)
}

ipcMain.handle('setAppActive', (event, isActive: boolean) => {
  setAppActive(isActive)
})
ipcMain.handle('openExtLink', (event, link: string) => shell.openExternal(link))
ipcMain.handle('setCredentials', (event, token: string, url: string) => setCredentials(token, url))
ipcMain.handle('getCredentials', () => { return getCredentialsFromStorage() })
ipcMain.handle('clearStorage', () => { return clear() })
